#! /bin/sh /usr/share/dpatch/dpatch-run
## 07_copy_colorful_article.dpatch by luohandsome@newsmth.net
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: support copy the text in qterm with color
## DP: Copyright: 2008 luohandsome@newsmth.net
## DP: License: GPLv2

@DPATCH@
diff -urNad qterm~/qterm/qtermframe.cpp qterm/qterm/qtermframe.cpp
--- qterm~/qterm/qtermframe.cpp	2006-07-10 15:36:13.000000000 +0800
+++ qterm/qterm/qtermframe.cpp	2008-01-05 14:24:06.000000000 +0800
@@ -806,6 +806,11 @@
 	wndmgr->activeWindow()->copyArticle();
 }
 
+void QTermFrame::copyColorfulArticle( )
+{
+	wndmgr->activeWindow()->copyColorfulArticle();
+}
+
 void QTermFrame::autoCopy()
 {
 	wndmgr->activeWindow()->m_bAutoCopy = !wndmgr->activeWindow()->m_bAutoCopy;
@@ -1369,6 +1374,8 @@
 	// Spec (5)
 	new QToolButton( QPixmap(pathPic+"pic/article.png"), tr("Copy Article"), QString::null,
 			this, SLOT(copyArticle()), mdiconnectTools, "Copy Article" );
+	new QToolButton( QPixmap(pathPic+"pic/article.png"), tr("Copy Colorful Article"), QString::null,
+			this, SLOT(copyColorfulArticle()), mdiconnectTools, "Copy Colorful Article" );
 	specAnti =
 		new QToolButton( QPixmap(pathPic+"pic/anti-idle.png"), tr("Anti-Idle"), QString::null,
 			this, SLOT(antiIdle()), mdiconnectTools, "Anti-Idle" );
@@ -1502,6 +1509,8 @@
 	spec->insertItem( QPixmap(pathLib+"pic/article.png"),
 					tr("&Copy article"), this, SLOT(copyArticle()), Qt::Key_F9, ID_SPEC_ARTICLE );
 	spec->setCheckable( true );
+	spec->insertItem( QPixmap(pathLib+"pic/article.png"),
+					tr("&Copy Colorful article"), this, SLOT(copyColorfulArticle()), Qt::Key_F9, ID_SPEC_ARTICLE );
 	spec->insertItem( QPixmap(pathLib+"pic/anti-idle.png"),
 					tr("Anti &idle"), this, SLOT(antiIdle()), 0, ID_SPEC_ANTI );
 	spec->insertItem(QPixmap(pathLib+"pic/auto-reply.png"), 
diff -urNad qterm~/qterm/qtermframe.h qterm/qterm/qtermframe.h
--- qterm~/qterm/qtermframe.h	2006-07-10 15:36:13.000000000 +0800
+++ qterm/qterm/qtermframe.h	2008-01-05 14:24:06.000000000 +0800
@@ -117,6 +117,7 @@
 	void copyRect();
 	void copyColor();
 	void copyArticle();
+	void copyColorfulArticle();
  	void autoCopy();
 	void wordWrap();
 	void noEsc();
diff -urNad qterm~/qterm/qtermpython.cpp qterm/qterm/qtermpython.cpp
--- qterm~/qterm/qtermpython.cpp	2006-07-10 15:36:13.000000000 +0800
+++ qterm/qterm/qtermpython.cpp	2008-01-05 14:24:06.000000000 +0800
@@ -158,6 +158,79 @@
 	return py_text;
 }
 
+// copy current artcle for back compatible use only
+// for new coder please use getArticle
+static PyObject *qterm_copyColorfulArticle(PyObject *, PyObject *args)
+{
+	long lp;
+	if (!PyArg_ParseTuple(args, "l", &lp))
+		return NULL;
+	QTermWindow *pWin=(QTermWindow*)lp;
+
+	QStringList strList;
+	QCString cstrArticle;
+	while(1)
+	{
+		// check it there is duplicated string
+		// it starts from the end in the range of one screen height
+		// so this is a non-greedy match
+		QString strTemp = pWin->stripWhitespace(
+				pWin->m_pBuffer->screen(0)->getText());
+		int i=0;
+		int start=0;
+		for(QStringList::Iterator it=strList.fromLast();
+	it!=strList.begin(), i < pWin->m_pBuffer->line()-1; // not exceeeding the last screen
+			--it, i++)
+		{
+			if(*it!=strTemp)
+				continue;
+			QStringList::Iterator it2 = it;
+			bool dup=true;
+			// match more to see if its duplicated
+			for(int j=0; j<=i; j++, it2++)
+			{
+				QString str1 = pWin->stripWhitespace(
+					pWin->m_pBuffer->screen(j)->getText());
+				if(*it2!=str1)
+				{
+					dup = false;
+					break;
+				}
+			}
+			if(dup)
+			{
+				// set the start point
+				start = i+1;
+				break;
+			}
+		}
+		// add new lines
+		for(i=start;i<pWin->m_pBuffer->line()-1;i++)
+			strList+=pWin->stripWhitespace(
+			pWin->m_pBuffer->screen(i)->getAttrText());
+
+		// the end of article
+		if( pWin->m_pBuffer->screen(
+		pWin->m_pBuffer->line()-1)->getText().find("%") == -1 )
+			break;
+		// continue
+		pWin->m_pTelnet->write(" ", 1);
+		
+		if(!pWin->m_wcWaiting.wait(10000))	// timeout
+			break;
+	}
+	#if defined(_OS_WIN32_) || defined(Q_OS_WIN32)
+	cstrArticle = strList.join("\r\n");
+	#else
+	cstrArticle = strList.join("\n");
+	#endif
+	
+	PyObject *py_text = PyString_FromString(cstrArticle);
+
+	Py_INCREF(py_text);
+	return py_text;
+}
+
 static PyObject *qterm_getArticle(PyObject *, PyObject *args)
 {
 	long lp;
@@ -567,6 +640,9 @@
 	{"copyArticle",		(PyCFunction)qterm_copyArticle,			METH_VARARGS,
 			"copy current article (obsolete)"},
 
+	{"copyColorfulArticle",		(PyCFunction)qterm_copyColorfulArticle,			METH_VARARGS,
+			"copy current colorful article (obsolete)"},
+
 	{"getText",		(PyCFunction)qterm_getText,			METH_VARARGS,
 			"get text at line#"},
 
diff -urNad qterm~/qterm/qtermwindow.cpp qterm/qterm/qtermwindow.cpp
--- qterm~/qterm/qtermwindow.cpp	2006-07-10 15:36:13.000000000 +0800
+++ qterm/qterm/qtermwindow.cpp	2008-01-05 14:24:06.000000000 +0800
@@ -78,9 +78,10 @@
 extern QString getOpenFileName(const QString&, QWidget*);
 
 // script thread
-QTermDAThread::QTermDAThread(QTermWindow *win)
+QTermDAThread::QTermDAThread(QTermWindow *win, bool color)
 {
 	pWin = win;
+	colorful = color;
 }
 
 QTermDAThread::~QTermDAThread()
@@ -127,8 +128,13 @@
 		}
 		// add new lines
 		for(i=start;i<pWin->m_pBuffer->line()-1;i++)
-			strList+=pWin->stripWhitespace(
-			pWin->m_pBuffer->screen(i)->getText());
+			if(!colorful)
+				strList+=pWin->stripWhitespace(
+				pWin->m_pBuffer->screen(i)->getText());
+			else
+				strList+=pWin->stripWhitespace(
+				pWin->m_pBuffer->screen(i)->getAttrText());
+
 
 		// the end of article
 		if( pWin->m_pBuffer->screen(
@@ -306,6 +312,7 @@
 	m_pMenu->insertItem( QPixmap(pathLib+"pic/copy.png"), tr("Copy"), this, SLOT(copy()), CTRL+Key_Insert );
 	m_pMenu->insertItem( QPixmap(pathLib+"pic/paste.png"), tr("Paste"), this, SLOT(paste()), SHIFT+Key_Insert );
 	m_pMenu->insertItem( QPixmap(pathLib+"pic/article.png"), tr("Copy Article"), this, SLOT(copyArticle()), Key_F9 );
+	m_pMenu->insertItem( QPixmap(pathLib+"pic/article.png"), tr("Copy Colorful Article"), this, SLOT(copyColorfulArticle()), Key_F9 );
 	m_pMenu->insertSeparator();
 	m_pMenu->insertItem( QPixmap(pathLib+"pic/fonts.png"), tr("Font"), this, SLOT(font()) );
 	m_pMenu->insertItem( QPixmap(pathLib+"pic/color.png"), tr("Color"), this, SLOT(color()) );
@@ -1405,6 +1412,15 @@
 	m_pDAThread->start();
 		
 }
+void QTermWindow::copyColorfulArticle( )
+{
+	if(!m_bConnected)
+		return;
+	
+	m_pDAThread = new QTermDAThread(this,true);
+	m_pDAThread->start();
+		
+}
 void QTermWindow::font()
 {		
 	bool ok;
diff -urNad qterm~/qterm/qtermwindow.h qterm/qterm/qtermwindow.h
--- qterm~/qterm/qtermwindow.h	2006-07-10 15:36:12.000000000 +0800
+++ qterm/qterm/qtermwindow.h	2008-01-05 14:24:06.000000000 +0800
@@ -40,13 +40,14 @@
 class QTermDAThread : public QThread
 {
 public:
-	QTermDAThread(QTermWindow*);
+	QTermDAThread(QTermWindow*, bool color = false);
 	~QTermDAThread();
 
 	virtual void run();
 	QCString cstrArticle;
 private:
 	QTermWindow *pWin;
+	bool	colorful;
 };
 
 class QTermWindow: public QMainWindow
@@ -65,6 +66,7 @@
 	void copy();
 	void paste();
 	void copyArticle();
+	void copyColorfulArticle();
 	void font();
 	void setting();
 	void color();
